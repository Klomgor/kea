#!/bin/sh

set -v
set -e

cd @srcdir@

# mes-files.txt
cd @TOP_SOURCE_DIR@
find . -type f -name '*.mes' | sort -V | sed 's#^./##g' > @srcdir@/mes-files.txt

# debug-messages.rst
@PYTHON@ @TOP_SOURCE_DIR@/tools/check-messages.py --generate-debug-messages-page

# kea-messages.rst
@PYTHON@ @srcdir@/mes2doc.py -o @srcdir@/kea-messages.rst

# api-files.txt
cd @TOP_SOURCE_DIR@
find src/share/api -type f -name '[a-z]*.json' | sort -V > @srcdir@/api-files.txt

cd @srcdir@
if test "@HAVE_PLANTUML@" != "no" ; then
    # uml-to-png
    # shellcheck disable=SC2043
    for uml in @umls@; do @PLANTUML@ -tpng "$uml"; done
    # uml-to-svg
    # shellcheck disable=SC2043
    for uml in @umls@; do @PLANTUML@ -tsvg "$uml"; done
    # format-svgs
    if test "@HAVE_XMLLINT" != "no" ; then
        # shellcheck disable=SC2043
	for svg in @svgs@; do xmllint --format "$svg" > tmp; mv tmp "$svg"; done
    else
	printf 'WARNING: xmllint not found. SVGs not formatted.\n'
    fi
    # uml-to-txt
    # shellcheck disable=SC2043
    for uml in @tumls@; do @PLANTUML@ -ttxt "$uml"; done
    # shellcheck disable=SC2043
    for txt in @txts@; do sed 's/ *$//g' "$txt" > tmp; mv tmp "$txt"; done
fi

cd @srcdir@
if test "@HAVE_PIP_COMPILE@" != "no" ; then
    rm -f ./src/requirements.txt
    pip-compile -r ./src/requirements.in
fi
